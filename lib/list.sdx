object List {
    fn map(f, x) {
        out = []
        for x {
            out = out + f(_)
        }
        out
    }

    fn filter(f, x) {
        out = []
        for x {
            res = f(_)
            if res {
                out = out + _
            }
        }
        out
    }

    fn reduce(f, i, x) {
        out = i
        for x {
            out = f(out, _)
        }
        out
    }

    fn range(b, e) {
        out = []
        i = b
        while i < e {
            out = out + i
            i = i + 1
        }
        out
    }
    
    # Iterate Over Integers 0 to (n-1) Inclusive
    fn iter(n) {
        i = 0
        out = []
        while i < n {
            out = out + i
            i = i + 1
        }
        out
    }

    # Find Length of List
    fn length(n) {
        i = 0
        for n { i = i + 1 }
        i
    }

    # Reverse List
    fn reverse(n){
        out = []
        i = length(n)
        while i > 0 {
            i = i - 1
            x = n(i)
            out = out + x
        }
        out
    }
}
# nice
